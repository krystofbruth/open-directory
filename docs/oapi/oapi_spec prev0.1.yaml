openapi: 3.0.3
info:
  title: OpenAD - Gateway API
  description: Open Active Directory Gateway service API. Used for identity authentication, authorization, access and management purposes.
  version: 1.0.0
tags:
  - name: Apps
    description: Register, manage and deregister client apps.
  - name: Authorization
    description: Endpoints for getting, renewing & invalidating token pairs.
  - name: Authentication
    description: Internal API endpoints for authentication of users.
  - name: Users
    description: Endpoints for accessing and managing users and user data.
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      required:
        - meta
        - code
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/RequestMeta"
        code:
          type: string
          example: ERR_AUTHENTICATION
    RequestMeta:
      required:
        - timestamp
        - requestId
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          format: uuid
    TokenPair:
      type: object
      properties:
        access:
          type: string
          format: jwt
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refresh:
          type: string
          format: sha256
          example: 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
    UserView:
      type: object
      required:
        - userid
        - username
      properties:
        userid:
          type: string
        username:
          type: string
  responses:
    InternalServerError:
      description: Internal server error occured. Contact the maintainers or fill out a bug report.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
security:
  - BearerAuth: []
servers:
  - url: /api/v1
paths:
  /authorization:
    post:
      security: []
      tags:
        - Authorization
      summary: Authorization step for the OAuth 2.0. flow.
      description: Based on the authorization token and client secret, retrieves a valid authorization token pair.
      parameters:
        - in: query
          name: authorization
          schema:
            type: string
            format: sha256
            example: 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9825
          description: The authorization token received from the sign-in step of OAuth 2.0. flow.
        - in: query
          name: secret
          schema:
            type: string
            format: sha256
            example: 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9825
          description: The app's client secret token used for authentication of the app.
      responses:
        "201":
          description: Flow step success, the body contains a new authorization token pair.
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - meta
                    properties:
                      meta:
                        $ref: "#/components/schemas/RequestMeta"
                  - $ref: "#/components/schemas/TokenPair"
        "400":
          description: Flow step failure, either the client secret or the authorization token were invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security: []
      tags:
        - Authorization
      summary: Retrieves a new token pair from the current session data.
      description: Retrieves a new token pair using the refresh token from the previous pair.
      parameters:
        - in: query
          name: refresh
          schema:
            type: string
            format: sha256
            example: 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9825
          description: Refresh token from the current token pair.
      responses:
        "200":
          description: Authorization success, the response body contains a new token pair.
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - meta
                    properties:
                      meta:
                        $ref: "#/components/schemas/RequestMeta"
                  - $ref: "#/components/schemas/TokenPair"
        "400":
          description: Authorization failed, the refresh token was invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Authorization failed, the refresh token was already used. Clearly communicate to the user that their account credentials might be compromised.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security: []
      tags:
        - Authorization
      summary: Invalidate the current refresh token.
      description: Invalidates the current refresh token of the token pair, resulting in token pair invalidation once the access token expires.
      parameters:
        - in: query
          name: refresh
          schema:
            type: string
            format: sha256
            example: 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9825
          description: The refresh token to be invalidated.
      responses:
        "200":
          description: Token invalidation success. In a few minutes, the access token will become invalid as well, resulting in complete token pair invalidation.
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      meta:
                        $ref: "#/components/schemas/RequestMeta"
                  - type: object
                    required:
                      - code
                    properties:
                      code:
                        type: string
                        enum:
                          - SUCCESS
        "400":
          description: The refresh token was invalid, may be treated equally as the 200 response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /authenticate:
    post:
      security: []
      tags:
        - Authentication
      summary: Retrieves a new token pair from login credentials.
      description: Accepts user credentials. If valid, returns the authorization token pair.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              type: object
              properties:
                username:
                  type: string
                  example: john.doe
                password:
                  type: string
                  example: Password123
      responses:
        "200":
          description: Authentication success, the response body contains a token pair.
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - meta
                    properties:
                      meta:
                        $ref: "#/components/schemas/RequestMeta"
                  - $ref: "#/components/schemas/TokenPair"
        "400":
          description: Authentication failure, either the username or the password were invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user:
    post:
      summary: Creates a new user.
      description: Based on the provided body, creates a new user.
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: User creation success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserView"
        "400":
          description: Not all required parameters were satisfied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: A user with the provided username already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
